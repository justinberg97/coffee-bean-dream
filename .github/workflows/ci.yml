name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      # Checks out your repository code into the runner environment.
      uses: actions/checkout@v4

    # The Node.js setup and npm install steps are not strictly needed here
    # if all backend/frontend building is handled by Dockerfiles and docker-compose build.
    # However, if you have linting or unit tests you run outside of Docker,
    # you might keep these steps. For this example, we'll focus on Docker Compose.

    - name: Verify Docker and Docker Compose Versions
      # This step helps to debug by showing the versions of Docker and Docker Compose
      # available on the GitHub Actions runner.
      run: |
        docker --version
        docker compose version

    - name: Build and Start Docker Compose Services
      # This command builds all images defined in docker-compose.yml
      # (e.g., backend, frontend, robot-tests) and starts all services
      # (mysql, backend, frontend, selenium-chrome) in detached mode (-d).
      # The '--wait' flag waits for services to be healthy before proceeding.
      run: docker-compose up --build -d --wait
      working-directory: . # Ensure this runs from the root where docker-compose.yml resides

    - name: Wait for Frontend to be Accessible (Optional but Recommended)
      # Even with --wait, sometimes the application server itself needs a moment.
      # This is a simple sleep. For production-grade CI, consider a dedicated
      # 'wait-for-it.sh' script or polling the frontend's health endpoint.
      run: sleep 10s
      working-directory: .

    - name: Run Robot Framework UI Tests
      # Executes the Robot Framework tests within the 'robot-tests' service.
      # The `command` in docker-compose.yml for robot-tests service will be used.
      # This command will exit with the test result (0 for pass, non-zero for fail).
      run: docker-compose run robot-tests
      working-directory: . # Ensure this runs from the root

    - name: Collect Robot Framework Results (Optional)
      # Uploads the Robot Framework report and log files as workflow artifacts.
      # This allows you to download and inspect the results from the GitHub Actions UI.
      if: always() # Run this step even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: robot-framework-results
        path: |
          output.xml
          log.html
          report.html

    - name: Stop and Remove Docker Compose Services
      # Cleans up the Docker Compose environment after tests are done.
      if: always() # Ensure cleanup happens even if previous steps fail
      run: docker-compose down --volumes --remove-orphans
      working-directory: .
